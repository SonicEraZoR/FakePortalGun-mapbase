///====== Copyright © 1996-2005, Valve Corporation, All rights reserved. =======
//
// Purpose: Portal?????? game definition file (.fgd) 
//
///=============================================================================

@include "halflife2.fgd"

///=============================================================================
//
// Logical Entities
//
///=============================================================================

//@PointClass base(Parentname, Targetname, Angles) studio( "models/props_bts/rocket_sentry.mdl" ) = npc_rocket_turret: "Aims a rocket at a target."
//[
//	spawnflags(Flags) =
//	[
//		1:  "Disabled" : 0
//	]
//
//	input Toggle(void) : "Toggles activity."
//	input Enable(void) : "Enables activity."
//	input Disable(void) : "Disables activity."
//	input SetTarget(string) : "Sets the target for this turret to attack."
//	input Destroy(void) : "Sets this turret to it's destroyed state."
//
//	output OnFoundTarget(void) 	: 	"Fired when the rocket turret finds an unobstructed target."
//	output OnLostTarget(void) 	: 	"Fired when turret's target is blocked."
//	output OnDeath(void)		:	"Fired after this turret finishes it's destroy think and begins it's death think."
//]

@BaseClass = EZVariable
[
	EZvariant(choices) : "Variant" : 0 : "Sets this entity's 'variant', e.g. slimy zombies that create radioactive puddles." =
	[
		0 : "Default"
		1 : "Xen"
		2 : "Radioactive/Slimy"
		3 : "Temporal"
		4 : "Arbeit"
	]
]

@PointClass base(Targetname, Angles, Studiomodel) studio( "models/props_bts/rocket_sentry.mdl" ) = npc_rocket_turret : "Aims a rocket at a target."
[
	spawnflags(Flags) = 
	[
		32 : "Autostart" : 1
		64 : "Start Inactive" : 0
		128 : "Never Retire" : 0
		256 : "Out of Ammo" : 0
	]

	minhealthdmg(integer) : "Min req'd damage for hurting turret" : 0		

	// Inputs
	input Enable(void) : "If closed, open."
	input Disable(void) : "If open, close."
	input Toggle(void) : "Toggle - If open, close. If closed, open."

	// Outputs
	output OnDeploy(void) : "Turret is becoming active and dangerous."
	output OnRetire(void) : "Turret is becoming inactive and harmless."
	output OnTipped(void) : "Turret has been tipped over and is inactive."
]

@PointClass base(Weapon) studio("models/weapons/w_portalgun.mdl") sphere(fademindist) sphere(fademaxdist) = weapon_fakeportalgun : "Fake Portalgun"
[
	CanFirePortal1(choices)			: "Can Fire Portal 1" : 1 : "Can this portalgun create blue portals?"	=
	[
		0 : "No"
		1 : "Yes"
	]
	CanFirePortal2(choices)			: "Can Fire Portal 2" : 1 : "Can this portalgun create red portals?"	=
	[
		0 : "No"
		1 : "Yes"
	]
]

@PointClass base(npc_turret_floor, EZVariable, ResponseContext) studio( "models/props/turret_01.mdl" ) frustum(FOV,0,Range,255 0 0,-1) = npc_arbeit_turret_floor : "Arbeit Floor Turret"
[
	TurretType(choices) : "Turret Type" : 0 : "Type of turret to use" =
	[
		0 : "Normal"
		1 : "Beast (Defective)"
	]
	
	Range(float) : "Range" : "1200" : "The turret's range. Pretend the frustum is coming from the light/eye."
	FOV(float) : "Field of View" : "60" : "The turret's FOV. Pretend the frustum is coming from the light/eye."
	
	EyeLightEnabled(choices) : "Eye Light Enabled" : 0 : "Toggles the built-in projected texture light, based on the Range and FOV values." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	Laser(choices) : "Laser Enabled" : 1 : "Toggles the turret's laser. The laser goes as far as the Range value." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	static(choices) : "Static" : 0 : "Makes the turret immobile." =
	[
		0 : "No"
		1 : "Yes"
	]
	
	// Inputs
	input TurnOnEyeLight(void) : "Turns on the eye light if it was disabled before."
	input TurnOffEyeLight(void) : "Turns off the eye light if it was enabled before."
	
	input TurnOnLaser(void) : "Turns on the laser if it was disabled before."
	input TurnOffLaser(void) : "Turns off the laser if it was enabled before."
	
	input EnableSilently(void) : "Enables the turret silently, not deploying immediately."
]

@PointClass base(Targetname, Angles, Studiomodel) studio( "models/props/security_camera.mdl" ) = npc_security_camera : "Security Camera"
[
	spawnflags(Flags) = 
	[
		32 : "Autostart" : 1
	]	

	// Inputs
	input Enable(void) : "If closed, open."
	input Disable(void) : "If open, close."
	input Toggle(void) : "Toggle - If open, close. If closed, open."
	input Ragdoll(void) : "Disable and fall off the wall."

	// Outputs
	output OnDeploy(void) : "Camera is becoming active and dangerous."
	output OnRetire(void) : "Camera is becoming inactive and harmless."
]
